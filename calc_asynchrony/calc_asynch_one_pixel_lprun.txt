Timer unit: 1e-06 s

Total time: 44.4563 s
File: /home/drew/Desktop/stuff/berk/research/projects/seasonality/seasonal_asynchrony/calc_asynchrony/asynch_fns.py
Function: calc_asynch_one_pixel at line 481

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   481                                           def calc_asynch_one_pixel(i, j, patch, patch_n, ys, xs, yres, xres, dims,
   482                                                                     design_mat, tree, indices,
   483                                                                     timeit=True, verbose=True):
   484                                               """
   485                                               Calculates and returns the asynchrony value for a single pixel
   486                                               located at position i,j in the patch.
   487                                               """
   488         1          5.0      5.0      0.0      if verbose and timeit:
   489                                                   # get start time
   490         1          6.0      6.0      0.0          start = time.time()
   491                                           
   492         1          2.0      2.0      0.0      if verbose:
   493         1        296.0    296.0      0.0          print('\nPROCESSING PATCH %i: PIXEL (%i, %i)...' % (patch_n, i, j))
   494                                           
   495                                               # create lists of R2 and dist values
   496         1          6.0      6.0      0.0      R2s = []
   497         1          5.0      5.0      0.0      dists = []
   498                                           
   499                                               # calculate the focal pixel's time series
   500         1        419.0    419.0      0.0      ts_foc = calc_time_series(patch, i, j, design_mat)
   501                                           
   502                                               # get the coords, dists, and array-indices
   503                                               # of all of the focal pixel's neighbors
   504         2   32505638.0 16252819.0     73.1      coords_dists_inds = get_neighbors_info(i, j, ys, xs, yres,
   505         1          5.0      5.0      0.0                                             xres, dims,
   506         1          5.0      5.0      0.0                                             tree=tree,
   507         1          5.0      5.0      0.0                                             indices=indices)
   508                                               # loop over neighbors
   509     26323      32744.0      1.2      0.1      for neigh_coords, neigh_info in coords_dists_inds.items():
   510                                                   # unpack the neighbor info
   511     26322      29441.0      1.1      0.1          neigh_dist, neigh_inds = neigh_info
   512     26322      25936.0      1.0      0.1          ni, nj = neigh_inds
   513                                           
   514                                                   # get the neighbor's time series
   515     26322     705737.0     26.8      1.6          ts_neigh = calc_time_series(patch, ni, nj, design_mat)
   516                                           
   517                                                   # drop this pixel if it returns NAs
   518     26322     347090.0     13.2      0.8          if np.any(np.isnan(ts_neigh)):
   519     20749      21950.0      1.1      0.0              pass
   520                                                   else:
   521                                                       # append the distance
   522      5573       8421.0      1.5      0.0              dists.append(neigh_dist)
   523                                           
   524                                                       # calculate and append the R2
   525      5573   10760306.0   1930.8     24.2              R2 = run_linear_regression(ts_foc, ts_neigh)['R2']
   526      5573      15109.0      2.7      0.0              R2s.append(R2)
   527                                           
   528                                               # get the slope of the overall regression
   529                                               # NOTE: setting fit_intercept to False and subtracting 1
   530                                               #       from the array of R2s effectively
   531                                               #       fixes the intercept at R2=1
   532         2       3111.0   1555.5      0.0      res = run_linear_regression(np.array(R2s) - 1,
   533         1          2.0      2.0      0.0                                      dists, fit_intercept=False)
   534         1          4.0      4.0      0.0      asynch = np.abs(res['slope'])
   535         1          1.0      1.0      0.0      asynch_R2 = res['R2']
   536         1          2.0      2.0      0.0      asynch_n = len(dists)
   537                                           
   538         1          2.0      2.0      0.0      if verbose and timeit:
   539                                                   # get finish time
   540         1          3.0      3.0      0.0          stop = time.time()
   541         1          2.0      2.0      0.0          diff = stop-start
   542         1         36.0     36.0      0.0          print('\truntime: %0.4f' % diff)
   543                                           
   544         1          1.0      1.0      0.0      return asynch, asynch_R2, asynch_n